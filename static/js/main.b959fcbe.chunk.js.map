{"version":3,"sources":["types/main.tsx","store/actions/main.actions.tsx","components/FiltersHotel/index.tsx","components/Navbar/index.tsx","App.tsx","serviceWorker.ts","store/reducers/main.reducer.tsx","store/reducers/index.tsx","store/store.tsx","index.tsx"],"names":["GET_HOTELS","SET_FILTER","useSelector","useReduxSelector","setFilter","filterName","filterValue","dispatch","a","type","payload","name","value","FiltersHotel","hotels","main","filtersHotelsList","columns","title","dataIndex","key","render","row","className","length","dataSource","pagination","pageSize","CheckboxGroup","Checkbox","Group","Option","Select","Navbar","useDispatch","countries","types","ratings","reviews_amounts","min_prices","filters","useEffect","min_price","Actions","onClick","showSearch","style","width","placeholder","optionFilterProp","onChange","country","map","index","mode","label","rating","item","toString","span","min","max","defaultValue","undefined","Number","reviews_amount","Sider","Layout","Content","App","hotelsRequest","console","log","theme","Boolean","window","location","hostname","match","defaultFilter","initialState","hotelsList","mainReducer","state","action","countriesList","typesList","reviewsList","prisesList","forEach","includes","push","sort","b","newFilters","newHotels","filter","i","hotelRatingArr","hotel","reducer","combineReducers","store","createStore","reducers","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b959fcbe.chunk.js","sourcesContent":["import { RootState } from \"../store/reducers\";\r\nimport {\r\n    useSelector as useReduxSelector,\r\n    TypedUseSelectorHook,\r\n} from 'react-redux'\r\n\r\nexport const GET_HOTELS = '[MAIN APP] GET_HOTELS';\r\nexport const SET_FILTER = '[MAIN APP] SET_FILTER';\r\nexport const SET_CLEAR_FILTER = '[MAIN APP] SET_CLEAR_FILTER';\r\nexport const SET_FILTER_HOTELS = '[MAIN APP] SET_FILTER_HOTELS';\r\n\r\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector\r\n\r\nexport type filterValueTypes = string | string[] | number[] | number\r\n\r\nexport interface hotel {\r\n    name: string\r\n    country: string\r\n    address: string\r\n    stars: number\r\n    type: string\r\n    description: string\r\n    services: [string]\r\n    min_price: number\r\n    currency: string\r\n    rating: number\r\n    reviews_amount: number\r\n    last_review: string\r\n}\r\n\r\ninterface filters {\r\n    country: string\r\n    type: string[]\r\n    rating: number[]\r\n    reviews_amount: number\r\n    min_price: number\r\n}\r\n\r\nexport interface MainState {\r\n    hotelsList:  hotel[],\r\n    filtersHotelsList:  hotel[],\r\n    countries: string[],\r\n    types: string[],\r\n    ratings: number[],\r\n    reviews_amounts: number[],\r\n    min_prices: number[],\r\n    filters: filters\r\n}\r\n\r\nexport interface getHotels {\r\n    type: typeof GET_HOTELS\r\n    payload: hotel[]\r\n}\r\n\r\nexport interface setFilter {\r\n    type: typeof SET_FILTER\r\n    payload: {\r\n        name: string\r\n        value: filterValueTypes\r\n    }\r\n}\r\n\r\nexport interface setClearFilter {\r\n    type: typeof SET_CLEAR_FILTER\r\n}\r\n\r\nexport interface setFilterHotels {\r\n    type: typeof SET_FILTER_HOTELS\r\n}\r\n\r\nexport type MainActionTypes =\r\n    | getHotels\r\n    | setFilter\r\n    | setClearFilter\r\n    | setFilterHotels\r\n","import {\r\n    GET_HOTELS, SET_FILTER, filterValueTypes, SET_CLEAR_FILTER, SET_FILTER_HOTELS\r\n} from \"../../types/main\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootState} from \"../reducers\";\r\nimport {Action} from \"redux\";\r\nimport hotels from '../../API/hotels.json'\r\n\r\nexport const getHotels = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\r\n    try {\r\n        const hotelsRequest = await hotels.hotels;\r\n        dispatch({\r\n            type: GET_HOTELS,\r\n            payload: hotelsRequest\r\n        })\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const setFilter = (filterName: string, filterValue: filterValueTypes): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\r\n    return dispatch({\r\n        type: SET_FILTER,\r\n        payload: {name: filterName, value: filterValue}\r\n    })\r\n}\r\n\r\nexport const setClearFilter = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\r\n    return dispatch({\r\n        type: SET_CLEAR_FILTER\r\n    })\r\n}\r\n\r\nexport const setFilterHotels = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\r\n    return dispatch({\r\n        type: SET_FILTER_HOTELS\r\n    })\r\n}\r\n\r\n\r\n","import React from 'react';\nimport {Button, Table} from 'antd';\nimport {useSelector} from \"../../types/main\";\n\nconst FiltersHotel = (): JSX.Element => {\n\n\tconst hotels = useSelector(main => main.main.filtersHotelsList);\n\n\tconst columns = [\n\t\t{\n\t\t\ttitle: 'Название',\n\t\t\tdataIndex: 'name',\n\t\t\tkey: 'name',\n\t\t},\n\t\t{\n\t\t\ttitle: 'Описание',\n\t\t\tdataIndex: 'description',\n\t\t\tkey: 'description',\n\t\t},\n\t\t{\n\t\t\ttitle: '',\n\t\t\tkey: 'action',\n\t\t\trender: (row: any) => <Button>Забронировать</Button>,\n\t\t},\n\t];\n\n\treturn <div className='text-center p-4'>\n\t\t{hotels.length > 0 ? <Table dataSource={hotels} columns={columns} pagination={{pageSize : 3}} /> : <h2>Записей не найдено</h2>}\n\t</div>\n}\n\n\nexport default FiltersHotel;\n","import React, {useEffect} from 'react';\nimport {Button, Select, Checkbox, Col, Row, InputNumber, Slider} from 'antd';\nimport {useSelector} from \"../../types/main\";\nimport {useDispatch} from \"react-redux\";\nimport * as Actions from \"../../store/actions\";\n\nconst CheckboxGroup = Checkbox.Group;\nconst { Option } = Select;\n\nconst Navbar = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const countries = useSelector(main => main.main.countries);\n    const types = useSelector(main => main.main.types);\n    const ratings = useSelector(main => main.main.ratings);\n    const reviews_amounts = useSelector(main => main.main.reviews_amounts);\n    const min_prices = useSelector(main => main.main.min_prices);\n    const filters = useSelector(main => main.main.filters);\n\n    const clearFilter = () => {\n        dispatch(Actions.setClearFilter())\n    }\n\n    const setFilter = () => {\n        dispatch(Actions.setFilterHotels())\n    }\n\n    const onChangeCountry = (value: string) => {\n        dispatch(Actions.setFilter('country', value))\n    }\n\n    const onChangeType = (value: string[]) => {\n        dispatch(Actions.setFilter('type', value))\n    }\n\n    const onChangeRating = (value: string[]) => {\n        dispatch(Actions.setFilter('rating', value))\n    }\n\n    const onChangeReviews = (value: string | number | undefined) => {\n        if (typeof value !== undefined) {\n            dispatch(Actions.setFilter('reviews_amount', Number(value)))\n        }\n    }\n\n    const onChangePrise = (value: number) => {\n        dispatch(Actions.setFilter('min_price', value))\n    }\n\n    useEffect(() => {\n        if (filters.min_price === 0 && min_prices.length >0) {\n            dispatch(Actions.setFilter('min_price', min_prices[0]))\n        }\n    }, [min_prices, filters.min_price, dispatch])\n\n    return <div className='p-3 flex-column'>\n\n\t\t<Button type=\"primary\" className='mb-4' onClick={clearFilter}>Очистить фильтр</Button>\n\n\t\t<div className='w-100 flex-column mb-4'>\n            <p>Страна:</p>\n            <Select\n                showSearch\n                style={{ width: '100%' }}\n                placeholder=\"Выбирите страну\"\n                optionFilterProp=\"children\"\n                onChange={onChangeCountry}\n                value={filters.country}\n            >\n                {countries.map((country, index): JSX.Element => <Option key={index} value={country}>{country}</Option>)}\n            </Select>\n\t\t</div>\n\n        <div className='w-100 flex-column mb-4'>\n            <p>Тип:</p>\n            <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Выбирете тип\"\n                onChange={onChangeType}\n                value={filters.type}\n            >\n                {types.map((type, index): JSX.Element => <Option key={index} value={type} label={type}>{type}</Option>)}\n            </Select>\n        </div>\n\n        <div className='w-100 flex-column mb-4'>\n            <p>Звезды:</p>\n            <CheckboxGroup\n                value={filters.rating.map((item) => item.toString())}\n                // @ts-ignore\n                onChange={onChangeRating}\n                className='flex flex-column'\n            >\n                <Row>\n                    {ratings.map((item, index) => {\n                        return <Col span={16} key={index}>\n                            <Checkbox value={item.toString()}>{item.toString()}</Checkbox>\n                        </Col>\n                    })}\n                </Row>\n            </CheckboxGroup>\n        </div>\n\n        <div className='flex-column mb-4'>\n            <p>Количество отзывов от:</p>\n            <InputNumber\n                min={0}\n                max={reviews_amounts.length > 0 ? reviews_amounts[0] : 0}\n                defaultValue={0}\n                onChange={onChangeReviews}\n                value={filters.reviews_amount}\n                className='w-100'/>\n        </div>\n\n        <div className='w-100 flex-column mb-4'>\n            Цена до:\n            <div className='w-100 row'>\n                <div className='col-2'>\n                    {min_prices.length > 0 ? min_prices[min_prices.length - 1] : 0}\n                </div>\n                <div className='col-6'>\n                    <Slider\n                        max={min_prices.length > 0 ? min_prices[0] : 0}\n                        min={min_prices.length > 0 ? min_prices[min_prices.length - 1] : 0}\n                        onChange={onChangePrise}\n                        value={filters.min_price}\n                    />\n                </div>\n                <div className='col-2'>\n                    {min_prices.length > 0 ? min_prices[0] : 0}\n                </div>\n            </div>\n        </div>\n\n        <Button type=\"primary\" onClick={setFilter}>Применить фильр</Button>\n    </div>\n}\n\n\nexport default Navbar;\n","import React, { useEffect } from 'react';\nimport * as Actions from './store/actions';\nimport { useDispatch } from 'react-redux';\nimport FiltersHotel from './components/FiltersHotel';\nimport { Layout } from 'antd';\nimport Navbar from './components/Navbar';\n\nconst { Sider, Content } = Layout;\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(Actions.getHotels())\n    }, [dispatch])\n\n    return (\n        <div className='container'>\n            <Layout className='p-20'>\n                <Sider theme='light' width='35%'>\n                    <Navbar />\n                </Sider>\n                <Content>\n                    <FiltersHotel />\n                </Content>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    GET_HOTELS, MainActionTypes, MainState, SET_CLEAR_FILTER, SET_FILTER, SET_FILTER_HOTELS, hotel,\r\n} from \"../../types/main\";\r\n\r\nconst defaultFilter = {\r\n    country: '',\r\n    type: [],\r\n    rating: [],\r\n    reviews_amount: 0,\r\n    min_price: 0,\r\n}\r\n\r\nconst initialState: MainState = {\r\n    hotelsList: [],\r\n    filtersHotelsList: [],\r\n    countries: [],\r\n    types: [],\r\n    ratings: [1,2,3,4,5],\r\n    reviews_amounts: [],\r\n    min_prices: [],\r\n    filters: {\r\n        country: '',\r\n        type: [],\r\n        rating: [],\r\n        reviews_amount: 0,\r\n        min_price: 0,\r\n    }\r\n};\r\n\r\nconst mainReducer = function (state = initialState, action: MainActionTypes) {\r\n    switch ( action.type )\r\n    {\r\n        case GET_HOTELS:\r\n            const countriesList: string[] = []\r\n            const typesList: string[] = []\r\n            let reviewsList: number[] = []\r\n            let prisesList: number[] = []\r\n            action.payload.forEach((item) => {\r\n                if (!countriesList.includes(item.country)) {\r\n                    countriesList.push(item.country)\r\n                }\r\n                if (!typesList.includes(item.type)) {\r\n                    typesList.push(item.type)\r\n                }\r\n                if (!reviewsList.includes(item.reviews_amount)) {\r\n                    reviewsList.push(item.reviews_amount)\r\n                }\r\n                if (!prisesList.includes(item.min_price)) {\r\n                    prisesList.push(item.min_price)\r\n                }\r\n            })\r\n            prisesList = [...prisesList.sort( (a, b) => a - b )]\r\n            reviewsList = [...prisesList.sort( (a, b) => b - a )]\r\n            return {\r\n                ...state,\r\n                hotelsList: action.payload,\r\n                filtersHotelsList: action.payload,\r\n                countries: countriesList,\r\n                types: typesList,\r\n                reviews_amounts: reviewsList,\r\n                min_prices: prisesList\r\n            };\r\n\r\n        case SET_FILTER:\r\n            const newFilters = {...state.filters}\r\n            // @ts-ignore\r\n            newFilters[action.payload.name] = action.payload.value\r\n            return {...state, filters: newFilters};\r\n\r\n        case SET_CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filters: defaultFilter,\r\n                filtersHotelsList: [...state.hotelsList]\r\n            };\r\n\r\n        case SET_FILTER_HOTELS:\r\n            let newHotels = [...state.hotelsList]\r\n            if (state.filters.country.length > 0) {\r\n                newHotels = [...newHotels.filter((i) => i.country === state.filters.country)]\r\n            }\r\n            if (state.filters.type.length > 0) {\r\n                newHotels = [...newHotels.filter((i) => state.filters.type.includes(i.type))]\r\n            }\r\n            if (state.filters.rating.length > 0) {\r\n                let hotelRatingArr: hotel[] = []\r\n                newHotels.forEach((hotel) => {\r\n                    state.filters.rating.forEach((rating) => {\r\n                        hotel.rating >= Number(rating) && hotel.rating <= Number(rating) + 0.9999 && hotelRatingArr.push(hotel)\r\n                    })\r\n                })\r\n                newHotels = [...hotelRatingArr]\r\n            }\r\n            if (state.filters.reviews_amount !== 0) {\r\n                newHotels = [...newHotels.filter((i) => i.reviews_amount > state.filters.reviews_amount)]\r\n            }\r\n            newHotels = [...newHotels.filter((i) => i.min_price <= state.filters.min_price)]\r\n            return {\r\n                ...state,\r\n                filtersHotelsList: newHotels\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default mainReducer;\r\n","import {combineReducers} from 'redux';\r\nimport main from './main.reducer';\r\n\r\nconst reducer = combineReducers({\r\n    main\r\n});\r\n\r\nexport default reducer;\r\n\r\nexport type RootState = ReturnType<typeof reducer>\r\n","import {\r\n    createStore,\r\n    applyMiddleware,\r\n    Store as ReduxStore,\r\n} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport reducers from './reducers'\r\n\r\nexport type Store = ReduxStore\r\n\r\nconst store: Store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}